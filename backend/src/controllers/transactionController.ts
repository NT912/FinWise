import { Request, Response } from "express";
import * as transactionService from "../services/transactionService";
import mongoose from "mongoose";

// ƒê·ªãnh nghƒ©a l·∫°i ki·ªÉu Request ƒë·ªÉ c√≥ thu·ªôc t√≠nh user
interface AuthRequest extends Request {
  user?: {
    id: string;
    email?: string;
  };
}

/**
 * L·∫•y t·∫•t c·∫£ giao d·ªãch c·ªßa ng∆∞·ªùi d√πng
 */
export const getAllTransactions = async (req: AuthRequest, res: Response) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: "Unauthorized" });
    }

    const transactions = await transactionService.getAllTransactions(userId);
    res.status(200).json(transactions);
  } catch (error: any) {
    console.error("Error in getAllTransactions controller:", error);
    res.status(500).json({ message: error.message || "Internal server error" });
  }
};

/**
 * L·∫•y giao d·ªãch theo danh m·ª•c
 */
export const getTransactionsByCategory = async (
  req: AuthRequest,
  res: Response
) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: "Unauthorized" });
    }

    const { categoryId } = req.params;
    const transactions = await transactionService.getTransactionsByCategory(
      userId,
      categoryId
    );
    res.status(200).json(transactions);
  } catch (error: any) {
    console.error("Error in getTransactionsByCategory controller:", error);
    res.status(500).json({ message: error.message || "Internal server error" });
  }
};

/**
 * L·∫•y chi ti·∫øt giao d·ªãch
 */
export const getTransactionById = async (req: AuthRequest, res: Response) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: "Unauthorized" });
    }

    const { transactionId } = req.params;
    const transaction = await transactionService.getTransactionById(
      userId,
      transactionId
    );
    res.status(200).json(transaction);
  } catch (error: any) {
    console.error("Error in getTransactionById controller:", error);
    if (error.message === "Transaction not found") {
      return res.status(404).json({ message: error.message });
    }
    res.status(500).json({ message: error.message || "Internal server error" });
  }
};

/**
 * T·∫°o giao d·ªãch m·ªõi
 */
export const createTransaction = async (req: AuthRequest, res: Response) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ error: "Unauthorized" });
    }

    const { title, amount, date, category, type, note } = req.body;

    // Validate required fields
    if (!title || !amount || !date || !category || !type) {
      return res.status(400).json({ error: "Missing required fields" });
    }

    // ƒê·∫£m b·∫£o category l√† m·ªôt string ID
    let categoryId = category;
    if (typeof category === "object" && category._id) {
      categoryId = category._id;
    }

    // Create transaction
    const transaction = await transactionService.createTransaction(userId, {
      title,
      amount,
      date,
      category: categoryId,
      type,
      note,
    });

    // Update user balance
    const amountChange = type === "income" ? amount : -amount;
    await transactionService.updateUserBalance(userId, amountChange);

    // Update category stats
    await transactionService.updateCategoryStats(categoryId, userId, amount);

    return res.status(201).json({
      message: "Transaction created successfully",
      transaction,
    });
  } catch (error: any) {
    console.error("Error in createTransaction controller:", error);

    // Check for WriteConflict error
    if (error.code === 112 && error.codeName === "WriteConflict") {
      return res.status(500).json({
        error:
          "WriteConflict: Transaction conflict detected. Please try again.",
        retryable: true,
      });
    }

    return res.status(500).json({
      error: error.message || "Failed to create transaction",
    });
  }
};

/**
 * C·∫≠p nh·∫≠t giao d·ªãch
 */
export const updateTransaction = async (req: AuthRequest, res: Response) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: "Unauthorized" });
    }

    const { transactionId } = req.params;
    const updateData = req.body;

    console.log(
      "‚¨áÔ∏è updateTransaction request data:",
      JSON.stringify(updateData, null, 2)
    );

    // Validation c∆° b·∫£n
    if (!updateData || Object.keys(updateData).length === 0) {
      return res.status(400).json({ message: "No update data provided" });
    }

    // ƒê·∫£m b·∫£o category l√† m·ªôt string n·∫øu c√≥
    if (updateData.category) {
      console.log(
        "üîÑ Processing category:",
        typeof updateData.category,
        updateData.category
      );

      if (
        typeof updateData.category === "object" &&
        updateData.category !== null &&
        updateData.category._id
      ) {
        console.log(
          "üîÑ Converting category object to ID:",
          updateData.category._id
        );
        updateData.category = updateData.category._id;
      } else if (typeof updateData.category === "string") {
        try {
          // Ki·ªÉm tra xem c√≥ ph·∫£i l√† JSON string kh√¥ng
          if (
            updateData.category.startsWith("{") &&
            updateData.category.endsWith("}")
          ) {
            const catObj = JSON.parse(updateData.category);
            if (catObj && catObj._id) {
              console.log("üîÑ Extracted ID from JSON string:", catObj._id);
              updateData.category = catObj._id;
            }
          }
        } catch (e) {
          // N·∫øu kh√¥ng parse ƒë∆∞·ª£c JSON, gi·ªØ nguy√™n gi√° tr·ªã
          console.log("‚ö†Ô∏è Failed to parse category JSON:", e);
        }
      }
    }

    // Validation d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (updateData.amount !== undefined) {
      const amount = Number(updateData.amount);
      if (isNaN(amount) || amount <= 0) {
        return res
          .status(400)
          .json({ message: "Amount must be a positive number" });
      }
    }

    if (updateData.type && !["income", "expense"].includes(updateData.type)) {
      return res.status(400).json({
        message: "Transaction type must be either 'income' or 'expense'",
      });
    }

    try {
      // L·∫•y th√¥ng tin giao d·ªãch c≈© tr∆∞·ªõc khi c·∫≠p nh·∫≠t
      const oldTransaction = await transactionService.getTransactionById(
        userId,
        transactionId
      );

      // C·∫≠p nh·∫≠t giao d·ªãch
      const updatedTransaction = await transactionService.updateTransaction(
        userId,
        transactionId,
        updateData
      );

      // Ki·ªÉm tra null
      if (!updatedTransaction) {
        return res.status(500).json({
          success: false,
          message: "Failed to update transaction",
        });
      }

      // T·∫°o bi·∫øn m·ªõi ƒë√£ ƒë∆∞·ª£c kh·∫≥ng ƒë·ªãnh r·∫±ng kh√¥ng null
      const safeTransaction = updatedTransaction;

      // T√≠nh to√°n s·ª± thay ƒë·ªïi s·ªë d∆∞ n·∫øu s·ªë ti·ªÅn ho·∫∑c lo·∫°i giao d·ªãch thay ƒë·ªïi
      if (updateData.amount !== undefined || updateData.type !== undefined) {
        const oldAmount =
          oldTransaction.type === "income"
            ? oldTransaction.amount
            : -oldTransaction.amount;

        const newAmount =
          safeTransaction.type === "income"
            ? safeTransaction.amount
            : -safeTransaction.amount;

        const amountChange = newAmount - oldAmount;

        // C·∫≠p nh·∫≠t s·ªë d∆∞ ng∆∞·ªùi d√πng
        if (amountChange !== 0) {
          await transactionService.updateUserBalance(userId, amountChange);
        }
      }

      // C·∫≠p nh·∫≠t th·ªëng k√™ danh m·ª•c n·∫øu thay ƒë·ªïi danh m·ª•c ho·∫∑c s·ªë ti·ªÅn
      if (updateData.category || updateData.amount !== undefined) {
        try {
          // L·∫•y category ID t·ª´ transaction ƒë√£ c·∫≠p nh·∫≠t
          let newCategoryId: string;
          const newCategory = safeTransaction.category;

          if (typeof newCategory === "object" && newCategory !== null) {
            if (newCategory._id) {
              newCategoryId = newCategory._id.toString();
            } else {
              console.warn("‚ö†Ô∏è Category object without _id:", newCategory);
              newCategoryId = String(newCategory);
            }
          } else {
            newCategoryId = String(newCategory);
          }

          // L·∫•y category ID c≈©
          let oldCategoryId: string;
          const oldCategory = oldTransaction.category;

          if (typeof oldCategory === "object" && oldCategory !== null) {
            if (oldCategory._id) {
              oldCategoryId = oldCategory._id.toString();
            } else {
              console.warn("‚ö†Ô∏è Old category object without _id:", oldCategory);
              oldCategoryId = String(oldCategory);
            }
          } else {
            oldCategoryId = String(oldCategory);
          }

          // X·ª≠ l√Ω n·∫øu danh m·ª•c thay ƒë·ªïi
          if (oldCategoryId !== newCategoryId) {
            console.log(
              `üìä Category changed: ${oldCategoryId} -> ${newCategoryId}`
            );

            // C·∫≠p nh·∫≠t danh m·ª•c m·ªõi
            await transactionService.updateCategoryStats(
              newCategoryId,
              userId,
              safeTransaction.amount
            );
          }
          // N·∫øu ch·ªâ thay ƒë·ªïi s·ªë ti·ªÅn, c·∫≠p nh·∫≠t th·ªëng k√™ danh m·ª•c hi·ªán t·∫°i
          else if (updateData.amount !== undefined) {
            console.log(`üìä Amount changed for category ${newCategoryId}`);

            await transactionService.updateCategoryStats(
              newCategoryId,
              userId,
              safeTransaction.amount - oldTransaction.amount
            );
          }
        } catch (error) {
          console.error("‚ùå Error updating category stats:", error);
          // Kh√¥ng throw l·ªói ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn lu·ªìng c·∫≠p nh·∫≠t transaction
        }
      }

      res.status(200).json({
        success: true,
        message: "Transaction updated successfully",
        transaction: safeTransaction,
      });
    } catch (error: any) {
      // X·ª≠ l√Ω c√°c l·ªói c·ª• th·ªÉ t·ª´ service
      if (error.message === "Transaction not found") {
        return res.status(404).json({ message: error.message });
      } else if (
        error.message === "Invalid transaction ID" ||
        error.message === "Invalid category ID" ||
        error.message === "New category not found" ||
        error.message === "Amount must be a positive number" ||
        error.message ===
          "Transaction type must be either 'income' or 'expense'"
      ) {
        return res.status(400).json({ message: error.message });
      }

      throw error; // N√©m l·ªói ƒë·ªÉ x·ª≠ l√Ω ·ªü catch b√™n ngo√†i
    }
  } catch (error: any) {
    console.error("Error in updateTransaction controller:", error);
    res.status(500).json({
      message: error.message || "Internal server error",
      success: false,
    });
  }
};

/**
 * X√≥a giao d·ªãch
 */
export const deleteTransaction = async (req: AuthRequest, res: Response) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: "Unauthorized" });
    }

    const { transactionId } = req.params;

    // Validation c∆° b·∫£n
    if (!transactionId || !mongoose.Types.ObjectId.isValid(transactionId)) {
      return res.status(400).json({ message: "Invalid transaction ID format" });
    }

    try {
      // L·∫•y th√¥ng tin giao d·ªãch tr∆∞·ªõc khi x√≥a
      const transaction = await transactionService.getTransactionById(
        userId,
        transactionId
      );

      // T√≠nh to√°n s·ª± thay ƒë·ªïi s·ªë d∆∞
      const amountChange =
        transaction.type === "income"
          ? -transaction.amount
          : transaction.amount;

      // C·∫≠p nh·∫≠t s·ªë d∆∞ ng∆∞·ªùi d√πng
      await transactionService.updateUserBalance(userId, amountChange);

      // X√≥a giao d·ªãch
      const result = await transactionService.deleteTransaction(
        userId,
        transactionId
      );

      res.status(200).json({
        success: true,
        message: "Transaction deleted successfully",
      });
    } catch (error: any) {
      // X·ª≠ l√Ω c√°c l·ªói c·ª• th·ªÉ t·ª´ service
      if (error.message === "Transaction not found") {
        return res.status(404).json({
          success: false,
          message: "Transaction not found",
        });
      } else if (
        error.message === "Invalid transaction ID" ||
        error.message === "Invalid user ID" ||
        error.message === "Category not found for this transaction"
      ) {
        return res.status(400).json({
          success: false,
          message: error.message,
        });
      } else if (error.message === "Failed to delete transaction") {
        return res.status(500).json({
          success: false,
          message: "Failed to delete transaction. Please try again.",
        });
      }

      throw error; // N√©m l·ªói ƒë·ªÉ x·ª≠ l√Ω ·ªü catch b√™n ngo√†i
    }
  } catch (error: any) {
    console.error("Error in deleteTransaction controller:", error);
    res.status(500).json({
      success: false,
      message: error.message || "Internal server error",
    });
  }
};

/**
 * L·∫•y giao d·ªãch theo kho·∫£ng th·ªùi gian
 */
export const getTransactionsByDateRange = async (
  req: AuthRequest,
  res: Response
) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: "Unauthorized" });
    }

    const { startDate, endDate } = req.query;

    if (!startDate || !endDate) {
      return res
        .status(400)
        .json({ message: "Start date and end date are required" });
    }

    const transactions = await transactionService.getTransactionsByDateRange(
      userId,
      new Date(startDate as string),
      new Date(endDate as string)
    );

    res.status(200).json(transactions);
  } catch (error: any) {
    console.error("Error in getTransactionsByDateRange controller:", error);
    res.status(500).json({ message: error.message || "Internal server error" });
  }
};
