import React, { useEffect, useState } from "react";
import { NavigationContainer } from "@react-navigation/native";
import { SafeAreaProvider } from "react-native-safe-area-context";
import AppNavigator from "./src/navigation/AppNavigator";
import { StatusBar } from "expo-status-bar";
import AsyncStorage from "@react-native-async-storage/async-storage";
import {
  checkServerConnection,
  checkCurrentToken,
  initializeApi,
} from "./src/services/apiService";
import {
  LogBox,
  View,
  Text,
  ActivityIndicator,
  StyleSheet,
} from "react-native";
import NetworkStatusMonitor from "./src/components/NetworkStatusMonitor";
import AlertProvider from "./src/components/common/AlertProvider";
import ToastProvider from "./src/components/ToastProvider";
import api from "./src/services/apiService";
import * as SplashScreen from "expo-splash-screen";
import { RootStackParamList } from "./src/navigation/AppNavigator";
import {
  useFonts,
  Roboto_400Regular,
  Roboto_500Medium,
  Roboto_700Bold,
  Roboto_300Light,
} from "@expo-google-fonts/roboto";
import apiClient from "./src/services/apiClient";

// B·ªè qua m·ªôt s·ªë c·∫£nh b√°o kh√¥ng c·∫ßn thi·∫øt
LogBox.ignoreLogs([
  "Warning: componentWillReceiveProps",
  "Warning: componentWillMount",
  "source.uri should not be an empty string",
  "Cannot update a component from inside",
  "fontFamily Roboto", // B·ªè qua c√°c c·∫£nh b√°o v·ªÅ font Roboto
  "Font ", // B·ªè qua c√°c c·∫£nh b√°o li√™n quan ƒë·∫øn font
  "Registering 'Roboto", // B·ªè qua c√°c c·∫£nh b√°o t·ª´ vi·ªác ƒëƒÉng k√Ω font
]);

// Gi·ªØ m√†n h√¨nh splash hi·ªÉn th·ªã cho ƒë·∫øn khi s·∫µn s√†ng
SplashScreen.preventAutoHideAsync().catch(() => {
  /* M√†n h√¨nh splash c√≥ th·ªÉ ƒë√£ b·ªã ·∫©n, kh√¥ng c·∫ßn x·ª≠ l√Ω l·ªói */
});

const App = () => {
  // S·ª≠ d·ª•ng useFonts hook t·ª´ expo-google-fonts
  const [fontsLoaded] = useFonts({
    "Roboto-Regular": Roboto_400Regular,
    "Roboto-Medium": Roboto_500Medium,
    "Roboto-Bold": Roboto_700Bold,
    "Roboto-Light": Roboto_300Light,
  });

  const [isReady, setIsReady] = useState(false);
  const [initialRoute, setInitialRoute] =
    useState<keyof RootStackParamList>("Login");
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    async function prepare() {
      try {
        console.log("üöÄ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o ·ª©ng d·ª•ng...");

        // Kh·ªüi t·∫°o API client t·ª´ apiService tr∆∞·ªõc
        await initializeApi();
        console.log("üîç apiService baseURL:", api.defaults.baseURL);

        // ƒê·∫£m b·∫£o apiClient ƒë∆∞·ª£c ƒë·ªìng b·ªô
        // ƒê·∫£m b·∫£o c·∫£ hai service d√πng c√πng m·ªôt baseURL
        if (apiClient.defaults.baseURL !== api.defaults.baseURL) {
          console.log("‚ö†Ô∏è Ph√°t hi·ªán baseURL kh√¥ng ƒë·ªìng b·ªô, ƒëang c·∫≠p nh·∫≠t...");
          console.log("- apiClient:", apiClient.defaults.baseURL);
          console.log("- apiService:", api.defaults.baseURL);

          // ƒê·ªìng b·ªô URL
          apiClient.defaults.baseURL = api.defaults.baseURL;
          console.log("‚úÖ ƒê√£ ƒë·ªìng b·ªô URL API: ", apiClient.defaults.baseURL);
        } else {
          console.log("‚úÖ baseURL ƒë√£ ƒë·ªìng b·ªô: ", api.defaults.baseURL);
        }

        // Ki·ªÉm tra k·∫øt n·ªëi server
        const isConnected = await checkServerConnection();
        console.log("‚úÖ K·∫øt n·ªëi server:", isConnected);

        // Ki·ªÉm tra token ƒë·ªÉ x√°c ƒë·ªãnh m√†n h√¨nh kh·ªüi ƒë·∫ßu
        const hasToken = await checkCurrentToken();
        if (hasToken) {
          setInitialRoute("TabNavigator");
        }

        setIsReady(true);
        setIsLoading(false);
      } catch (e) {
        console.warn("‚ö†Ô∏è L·ªói khi kh·ªüi t·∫°o ·ª©ng d·ª•ng:", e);
        setIsReady(true); // V·∫´n ƒë·∫∑t l√† s·∫µn s√†ng ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ thao t√°c
        setIsLoading(false);
      } finally {
        // ·∫®n m√†n h√¨nh splash khi ƒë√£ s·∫µn s√†ng
        if (fontsLoaded) {
          await SplashScreen.hideAsync();
        }
      }
    }

    if (fontsLoaded) {
      prepare();
    }
  }, [fontsLoaded]);

  useEffect(() => {
    // ·∫®n m√†n h√¨nh splash khi fonts ƒë√£ t·∫£i xong
    if (fontsLoaded) {
      SplashScreen.hideAsync().catch((err) => {
        console.log("Kh√¥ng th·ªÉ ·∫©n splash screen:", err);
      });
    }
  }, [fontsLoaded]);

  if (!fontsLoaded || !isReady) {
    // Ti·∫øp t·ª•c hi·ªÉn th·ªã splash screen cho ƒë·∫øn khi ·ª©ng d·ª•ng s·∫µn s√†ng
    return null;
  }

  if (isLoading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#00875F" />
        <Text style={styles.loadingText}>ƒêang t·∫£i...</Text>
      </View>
    );
  }

  return (
    <SafeAreaProvider>
      <StatusBar style="auto" />
      <AlertProvider>
        <ToastProvider>
          <NavigationContainer>
            <NetworkStatusMonitor />
            <AppNavigator initialRouteName={initialRoute} />
          </NavigationContainer>
        </ToastProvider>
      </AlertProvider>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  loadingContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#fff",
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
    color: "#666",
  },
});

export default App;
