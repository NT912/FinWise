import api from "./apiService";
import { Transaction } from "../types";
import AsyncStorage from "@react-native-async-storage/async-storage";

const API_URL = "http://192.168.1.7:3002";
const MAX_RETRIES = 3;
const RETRY_DELAY = 500; // ms

/**
 * Fetch all transactions for the current user
 * @returns Array of transactions
 */
export const getAllTransactions = async (): Promise<Transaction[]> => {
  try {
    console.log("üîÑ ƒêang l·∫•y t·∫•t c·∫£ giao d·ªãch...");
    const response = await api.get("/api/transactions");
    console.log(`‚úÖ ƒê√£ l·∫•y ${response.data.length || 0} giao d·ªãch`);
    return response.data;
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y giao d·ªãch:", error);
    throw error;
  }
};

/**
 * Fetch transactions for a specific category
 * @param categoryId The ID of the category
 * @returns Array of transactions for the category
 */
export const getTransactionsByCategory = async (
  categoryId: string
): Promise<Transaction[]> => {
  try {
    console.log(`üîÑ ƒêang l·∫•y giao d·ªãch cho danh m·ª•c: ${categoryId}`);
    const response = await api.get(`/api/transactions/category/${categoryId}`);
    console.log(
      `‚úÖ ƒê√£ l·∫•y ${response.data.length || 0} giao d·ªãch cho danh m·ª•c`
    );
    return response.data;
  } catch (error) {
    console.error(
      `‚ùå L·ªói khi l·∫•y giao d·ªãch theo danh m·ª•c ${categoryId}:`,
      error
    );
    throw error;
  }
};

/**
 * Fetch a specific transaction by ID
 * @param transactionId The ID of the transaction
 * @returns Transaction details
 */
export const getTransactionById = async (
  transactionId: string
): Promise<Transaction> => {
  try {
    console.log(`üîÑ ƒêang l·∫•y chi ti·∫øt giao d·ªãch: ${transactionId}`);
    const response = await api.get(`/api/transactions/${transactionId}`);
    console.log(`‚úÖ ƒê√£ l·∫•y chi ti·∫øt giao d·ªãch: ${transactionId}`);
    return response.data;
  } catch (error) {
    console.error(`‚ùå L·ªói khi l·∫•y chi ti·∫øt giao d·ªãch ${transactionId}:`, error);
    throw error;
  }
};

// Helper function to wait for a specified time
const wait = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));

// Function to create a new transaction with retry mechanism
export const createTransaction = async (transactionData: any): Promise<any> => {
  let retries = 0;

  while (retries < MAX_RETRIES) {
    try {
      const token = await AsyncStorage.getItem("token");

      console.log("üîÑ ƒêang t·∫°o giao d·ªãch m·ªõi...", transactionData);
      console.log("üîÑ Request: /api/transactions");

      const response = await api.post("/api/transactions", transactionData, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      console.log("‚úÖ ƒê√£ t·∫°o giao d·ªãch m·ªõi:", response.data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå L·ªói khi t·∫°o giao d·ªãch:", error);

      // Check if it's a WriteConflict error
      if (
        error.response?.status === 500 &&
        (error.response?.data?.retryable ||
          (error.response?.data?.error &&
            error.response?.data?.error.includes("WriteConflict")))
      ) {
        retries++;
        console.log(
          `‚ö†Ô∏è L·ªói WriteConflict, th·ª≠ l·∫°i l·∫ßn ${retries}/${MAX_RETRIES}`
        );

        if (retries < MAX_RETRIES) {
          // Wait a bit before retrying (exponential backoff)
          const delay = RETRY_DELAY * Math.pow(2, retries - 1);
          await wait(delay);
          continue;
        }
      }

      // If it's not a WriteConflict error or we've reached max retries, throw the error
      throw error;
    }
  }

  throw new Error("Exceeded maximum retry attempts");
};

/**
 * Update an existing transaction
 * @param transactionId The ID of the transaction to update
 * @param transactionData The updated data
 * @returns Updated transaction
 */
export const updateTransaction = async (
  transactionId: string,
  transactionData: Partial<Transaction>
): Promise<Transaction> => {
  try {
    console.log(`üîÑ ƒêang c·∫≠p nh·∫≠t giao d·ªãch: ${transactionId}`);
    const response = await api.put(
      `/api/transactions/${transactionId}`,
      transactionData
    );

    // X·ª≠ l√Ω ph·∫£n h·ªìi c√≥ th·ªÉ c·∫•u tr√∫c kh√°c nhau
    const result = response.data.transaction || response.data;
    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t giao d·ªãch: ${transactionId}`);
    return result;
  } catch (error) {
    console.error(`‚ùå L·ªói khi c·∫≠p nh·∫≠t giao d·ªãch ${transactionId}:`, error);
    throw error;
  }
};

/**
 * Delete a transaction
 * @param transactionId The ID of the transaction to delete
 * @returns Success message
 */
export const deleteTransaction = async (
  transactionId: string
): Promise<{ success: boolean; message: string }> => {
  let retryCount = 0;
  const maxRetries = 5; // TƒÉng s·ªë l·∫ßn th·ª≠

  const performDelete = async (): Promise<{
    success: boolean;
    message: string;
  }> => {
    try {
      // Th√™m timeout d√†i h∆°n
      const timeout = 15000; // 15 seconds

      console.log(
        `üîÑ ƒêang x√≥a giao d·ªãch: ${transactionId} (L·∫ßn th·ª≠ ${retryCount + 1}/${
          maxRetries + 1
        })`
      );
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), timeout);

      try {
        const response = await api.delete(
          `/api/transactions/${transactionId}`,
          {
            signal: controller.signal,
          }
        );
        clearTimeout(timeoutId);

        console.log(`‚úÖ ƒê√£ x√≥a giao d·ªãch: ${transactionId}`);

        // Tr·∫£ v·ªÅ k·∫øt qu·∫£ t·ª´ server n·∫øu c√≥
        if (response.data && typeof response.data === "object") {
          return response.data;
        }

        // N·∫øu server kh√¥ng tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng, t·∫°o m·ªôt response chu·∫©n
        return { success: true, message: "Transaction deleted successfully" };
      } catch (e) {
        clearTimeout(timeoutId);
        throw e; // Re-throw ƒë·ªÉ x·ª≠ l√Ω ·ªü catch b√™n ngo√†i
      }
    } catch (error: any) {
      // Ch·ªâ ghi log l·ªói ·ªü l·∫ßn cu·ªëi ho·∫∑c khi c·∫ßn debug
      if (retryCount === maxRetries) {
        console.error(`‚ùå L·ªói khi x√≥a giao d·ªãch ${transactionId}:`, error);
      }

      // X·ª≠ l√Ω response l·ªói t·ª´ server
      if (error.response && error.response.data) {
        // Gi·∫£m s·ªë l∆∞·ª£ng log
        if (retryCount === maxRetries) {
          console.error("Server error response:", error.response.data);
        }

        // Ki·ªÉm tra xem c√≥ ph·∫£i l·ªói xung ƒë·ªôt ghi kh√¥ng
        const errorMessage = error.response.data.message || "";
        if (
          (errorMessage.includes("Write conflict") ||
            errorMessage.includes("Caused by") ||
            error.response.status === 500) &&
          retryCount < maxRetries
        ) {
          retryCount++;
          // ƒê·ª£i m·ªôt kho·∫£ng th·ªùi gian d√†i h∆°n tr∆∞·ªõc khi th·ª≠ l·∫°i
          const delay = Math.floor(Math.random() * 2000) + 1000; // 1000-3000ms
          console.log(
            `‚ö†Ô∏è Xung ƒë·ªôt khi l∆∞u, th·ª≠ l·∫°i l·∫ßn ${retryCount} sau ${delay}ms...`
          );
          await new Promise((resolve) => setTimeout(resolve, delay));
          return performDelete(); // Th·ª≠ l·∫°i
        }

        throw new Error(errorMessage || "Failed to delete transaction");
      }

      // X·ª≠ l√Ω timeout
      if (error.name === "AbortError") {
        if (retryCount < maxRetries) {
          retryCount++;
          console.log(`‚è±Ô∏è H·∫øt th·ªùi gian ch·ªù, th·ª≠ l·∫°i l·∫ßn ${retryCount}...`);
          return performDelete(); // Th·ª≠ l·∫°i
        }
        throw new Error("Connection timeout. Please try again later.");
      }

      // X·ª≠ l√Ω l·ªói network ho·∫∑c kh√¥ng c√≥ response
      if (error.request) {
        if (retryCount < maxRetries) {
          retryCount++;
          const delay = Math.floor(Math.random() * 1000) + 500;
          console.log(
            `üîÑ L·ªói k·∫øt n·ªëi, th·ª≠ l·∫°i l·∫ßn ${retryCount} sau ${delay}ms...`
          );
          await new Promise((resolve) => setTimeout(resolve, delay));
          return performDelete(); // Th·ª≠ l·∫°i
        }
        throw new Error(
          "Network error. Please check your connection and try again."
        );
      }

      throw new Error(error.message || "Failed to delete transaction");
    }
  };

  return performDelete();
};

/**
 * Get transactions by date range
 * @param startDate Start date (ISO string)
 * @param endDate End date (ISO string)
 * @returns Array of transactions within the date range
 */
export const getTransactionsByDateRange = async (
  startDate: string,
  endDate: string
): Promise<Transaction[]> => {
  try {
    console.log(`üîÑ ƒêang l·∫•y giao d·ªãch t·ª´ ${startDate} ƒë·∫øn ${endDate}`);
    const response = await api.get("/api/transactions/date-range", {
      params: { startDate, endDate },
    });
    console.log(
      `‚úÖ ƒê√£ l·∫•y ${response.data.length || 0} giao d·ªãch theo kho·∫£ng th·ªùi gian`
    );
    return response.data;
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y giao d·ªãch theo kho·∫£ng th·ªùi gian:", error);
    throw error;
  }
};

export default {
  getAllTransactions,
  getTransactionsByCategory,
  getTransactionsByDateRange,
  createTransaction,
  updateTransaction,
  deleteTransaction,
  getTransactionById,
};
