import axios from "axios";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { Platform } from "react-native";
import NetInfo from "@react-native-community/netinfo";

// C·∫≠p nh·∫≠t URL API d·ª±a tr√™n m√¥i tr∆∞·ªùng
const getApiUrl = () => {
  if (Platform.OS === "web") {
    return "http://localhost:3001/api";
  } else {
    // ƒê·ªãa ch·ªâ IP c·ªßa m√°y host - ƒë∆∞·ª£c c·∫≠p nh·∫≠t theo m·∫°ng hi·ªán t·∫°i
    const hostIP = "172.20.10.2"; // ƒê·ªãa ch·ªâ IP c·ªßa m√°y ch·ªß c·ªßa b·∫°n trong m·∫°ng LAN

    // Danh s√°ch c√°c IP d·ª± ph√≤ng ƒë·ªÉ th·ª≠ k·∫øt n·ªëi
    const fallbackIPs = [
      hostIP, // IP ch√≠nh
      "localhost", // localhost
      "10.0.2.2", // ƒê·ªãa ch·ªâ localhost cho Android Emulator
      "127.0.0.1", // localhost alternative
    ];

    console.log("üì± Thi·∫øt b·ªã di ƒë·ªông, s·ª≠ d·ª•ng IP:", hostIP);

    return __DEV__
      ? `http://${hostIP}:3001/api` // S·ª≠ d·ª•ng IP th·ª±c c·ªßa m√°y ch·ªß cho thi·∫øt b·ªã di ƒë·ªông
      : "https://your-production-api.com/api"; // URL production
  }
};

const API_URL = getApiUrl();
console.log("üîç API URL hi·ªán t·∫°i:", API_URL);

// Bi·∫øn l∆∞u URL th·ª±c s·ª± ƒëang s·ª≠ d·ª•ng
let activeApiUrl = API_URL;

// Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn server tr∆∞·ªõc khi kh·ªüi t·∫°o API client
const checkServerConnection = async () => {
  try {
    console.log("üîÑ Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß:", `${API_URL}/health`);
    const response = await axios.get(`${API_URL}/health`, { timeout: 5000 });
    console.log("‚úÖ M√°y ch·ªß ho·∫°t ƒë·ªông:", response.data);
    return true;
  } catch (error: any) {
    console.error(
      "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß:",
      error?.message || "Unknown error"
    );

    // S·ª≠ d·ª•ng c∆° ch·∫ø th·ª≠ k·∫øt n·ªëi v·ªõi c√°c IP thay th·∫ø
    console.log("üîÑ Th·ª≠ k·∫øt n·ªëi v·ªõi c√°c IP thay th·∫ø...");
    const fallbackUrl = await tryFallbackConnections();

    if (fallbackUrl) {
      console.log("‚úÖ ƒê√£ t√¨m th·∫•y IP ho·∫°t ƒë·ªông:", fallbackUrl);
      // Ghi l·∫°i IP ho·∫°t ƒë·ªông ƒë·ªÉ s·ª≠ d·ª•ng cho l·∫ßn sau
      // L∆∞u √Ω: ƒê√¢y ch·ªâ l√† g·ª£i √Ω, c·∫ßn th√™m c∆° ch·∫ø ƒë·ªìng b·ªô th·ª±c t·∫ø
      console.log("üí° G·ª£i √Ω: C·∫≠p nh·∫≠t IP trong m√£ ngu·ªìn th√†nh IP ƒë√£ x√°c minh");
      return true;
    }

    // N·∫øu kh√¥ng t√¨m th·∫•y IP n√†o ho·∫°t ƒë·ªông
    console.error("‚ùå T·∫•t c·∫£ c√°c IP ƒë·ªÅu kh√¥ng ho·∫°t ƒë·ªông");
    return false;
  }
};

// API client v·ªõi c·∫•u h√¨nh t·ªët h∆°n
const api = axios.create({
  baseURL: API_URL, // URL ban ƒë·∫ßu, c√≥ th·ªÉ ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau
  headers: {
    "Content-Type": "application/json",
    Accept: "application/json",
  },
  timeout: 30000,
  // Th√™m withCredentials ƒë·ªÉ h·ªó tr·ª£ CORS v·ªõi credentials
  withCredentials: true,
});

// G·ªçi h√†m ki·ªÉm tra k·∫øt n·ªëi v√† c·∫≠p nh·∫≠t URL n·∫øu c·∫ßn
checkServerConnection().then(async (isConnected) => {
  console.log("üåê K·∫øt n·ªëi m√°y ch·ªß kh·∫£ d·ª•ng:", isConnected);

  if (!isConnected) {
    // N·∫øu kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c, th·ª≠ v·ªõi c√°c IP d·ª± ph√≤ng
    const fallbackUrl = await tryFallbackConnections();
    if (fallbackUrl) {
      activeApiUrl = fallbackUrl;
      console.log("üîÄ Chuy·ªÉn sang s·ª≠ d·ª•ng URL:", activeApiUrl);
    }
  }

  // C·∫≠p nh·∫≠t baseURL cho api instance
  api.defaults.baseURL = activeApiUrl;
  console.log("üîå API hi·ªán ƒëang s·ª≠ d·ª•ng URL:", api.defaults.baseURL);
});

// Enhanced error handling
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    if (error.code === "ERR_NETWORK") {
      console.error("üö® L·ªói k·∫øt n·ªëi m·∫°ng chi ti·∫øt:", {
        message: error.message,
        url: error.config?.url,
        method: error.config?.method,
        baseURL: error.config?.baseURL,
        stack: error.stack,
      });

      // Ki·ªÉm tra k·∫øt n·ªëi internet
      const netInfo = await NetInfo.fetch();
      console.log("üì∂ Tr·∫°ng th√°i m·∫°ng khi g·∫∑p l·ªói:", netInfo);

      if (!netInfo.isConnected) {
        throw new Error(
          "Kh√¥ng c√≥ k·∫øt n·ªëi internet. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng."
        );
      }

      // Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn server
      try {
        await axios.get(API_URL + "/health", { timeout: 5000 });
      } catch (serverError) {
        console.error("üö® L·ªói k·∫øt n·ªëi ƒë·∫øn server:", serverError);
        throw new Error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.");
      }
    }

    return Promise.reject(error);
  }
);

// X·ª≠ l√Ω request
api.interceptors.request.use(async (config) => {
  try {
    console.log("üåê Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng...");
    const netInfo = await NetInfo.fetch();
    console.log("üì∂ Tr·∫°ng th√°i m·∫°ng:", netInfo);

    if (!netInfo.isConnected) {
      throw new Error("Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng");
    }

    const token = await AsyncStorage.getItem("token");
    if (token) {
      console.log("üîë Token ƒë∆∞·ª£c t√¨m th·∫•y, th√™m v√†o header");
      config.headers.Authorization = `Bearer ${token}`;
    } else {
      console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y token trong AsyncStorage");
    }

    console.log("üì§ Request:", {
      url: config.url,
      method: config.method,
      baseURL: config.baseURL,
      data: config.data
        ? JSON.stringify(config.data).substring(0, 200) + "..."
        : undefined,
    });

    return config;
  } catch (error) {
    console.error("‚ùå L·ªói khi g·ª≠i request:", error);
    return Promise.reject(error);
  }
});

// X·ª≠ l√Ω response
api.interceptors.response.use(
  (response) => {
    console.log("‚úÖ Response th√†nh c√¥ng:", {
      url: response.config.url,
      method: response.config.method,
      status: response.status,
      data: response.data ? "Data received" : "No data",
    });
    return response;
  },
  async (error) => {
    console.error("‚ùå Response l·ªói:", {
      url: error.config?.url,
      method: error.config?.method,
      status: error.response?.status,
      data: error.response?.data,
      message: error.message,
    });

    // X·ª≠ l√Ω l·ªói m·∫°ng
    if (!error.response) {
      console.error("üö® Network error details:", error);
      throw new Error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.");
    }

    // X·ª≠ l√Ω l·ªói 401 (Unauthorized)
    if (error.response.status === 401) {
      console.log("‚ö†Ô∏è Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n, ƒëang x√≥a token...");
      await AsyncStorage.removeItem("token");
      // C√≥ th·ªÉ th√™m logic chuy·ªÉn v·ªÅ m√†n h√¨nh login ·ªü ƒë√¢y
    }

    return Promise.reject(error);
  }
);

// ƒê·ªëi v·ªõi ch·ª©c nƒÉng x√≥a t√†i kho·∫£n, th√™m x·ª≠ l√Ω ƒë·∫∑c bi·ªát
export const enhancedDelete = async (url: string, data?: any) => {
  try {
    console.log(`üö® Enhanced delete request to ${url}`);
    const token = await AsyncStorage.getItem("token");
    if (!token) {
      throw new Error("No authentication token found");
    }

    return await api.delete(url, {
      data,
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
  } catch (error) {
    console.error("Enhanced delete error:", error);
    throw error;
  }
};

export default api;

// Th√™m h√†m delay
const delay = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));

// Th√™m h√†m retry
const withRetry = async (fn: () => Promise<any>, retries = 3) => {
  for (let i = 0; i < retries; i++) {
    try {
      return await fn();
    } catch (error) {
      if (i === retries - 1) throw error;
      await delay(1000 * (i + 1));
      console.log(`üîÑ Retry attempt ${i + 1}`);
    }
  }
};

// √Åp d·ª•ng retry cho c√°c request
api.interceptors.request.use(async (config) => {
  return withRetry(async () => {
    try {
      // Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng
      const netInfo = await NetInfo.fetch();
      if (!netInfo.isConnected) {
        throw new Error("Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng");
      }

      const token = await AsyncStorage.getItem("token");
      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
      }

      // Log request ƒë·ªÉ debug
      console.log("üì§ Request:", {
        url: config.url,
        method: config.method,
        baseURL: config.baseURL,
        headers: config.headers,
      });

      return config;
    } catch (error) {
      console.error("‚ùå L·ªói khi g·ª≠i request:", error);
      return Promise.reject(error);
    }
  });
});

// T·ª± ƒë·ªông th·ª≠ k·∫øt n·ªëi v·ªõi c√°c IP d·ª± ph√≤ng n·∫øu IP ch√≠nh kh√¥ng ho·∫°t ƒë·ªông
const tryFallbackConnections = async () => {
  const fallbackIPs = [
    "172.20.10.2", // IP hi·ªán t·∫°i
    "192.168.1.4", // IP tr∆∞·ªõc ƒë√≥
    "localhost",
    "10.0.2.2", // ƒê·ªãa ch·ªâ localhost cho Android Emulator
    "127.0.0.1",
  ];

  for (const ip of fallbackIPs) {
    try {
      console.log(`üîÑ Th·ª≠ k·∫øt n·ªëi v·ªõi IP: ${ip}`);
      const url = `http://${ip}:3001/api/health`;
      const response = await axios.get(url, { timeout: 5000 });

      if (response.status === 200) {
        console.log(`‚úÖ K·∫øt n·ªëi th√†nh c√¥ng v·ªõi IP: ${ip}`);
        return `http://${ip}:3001/api`;
      }
    } catch (error: any) {
      const errorMsg = error?.message || "Unknown error";
      const errorCode = error?.code || "NO_CODE";
      console.log(
        `‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi IP: ${ip} - ${errorCode}: ${errorMsg}`
      );

      // Ti·∫øp t·ª•c v·ªõi IP ti·∫øp theo
      continue;
    }
  }

  console.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi b·∫•t k·ª≥ IP n√†o trong danh s√°ch");
  return null;
};
