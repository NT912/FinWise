import api from "./apiService";
import AsyncStorage from "@react-native-async-storage/async-storage";

// üè† L·∫•y d·ªØ li·ªáu trang Home (S·ªë d∆∞, t·ªïng chi ti√™u)
export const fetchHomeData = async (filter = "monthly") => {
  try {
    const token = await AsyncStorage.getItem("token");
    if (!token) {
      throw new Error("üö® Token kh√¥ng t·ªìn t·∫°i!");
    }

    console.log("‚úÖ G·ª≠i request v·ªõi token:", token);
    console.log(`‚úÖ ƒêang g·ªçi API /api/home?timeFilter=${filter}`);

    // L·∫•y d·ªØ li·ªáu home
    const homeResponse = await api.get(`/api/home?timeFilter=${filter}`, {
      headers: { Authorization: `Bearer ${token}` },
    });

    console.log("‚úÖ API /api/home tr·∫£ v·ªÅ:", homeResponse.data);

    // Ki·ªÉm tra d·ªØ li·ªáu ng∆∞·ªùi d√πng
    if (!homeResponse.data.userName) {
      console.warn("‚ö†Ô∏è API kh√¥ng tr·∫£ v·ªÅ userName, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh");
    } else {
      console.log("‚úÖ API tr·∫£ v·ªÅ userName:", homeResponse.data.userName);
    }

    // Tr·∫£ v·ªÅ d·ªØ li·ªáu t·ª´ API home
    return {
      ...homeResponse.data,
      userName: homeResponse.data.userName || "User", // S·ª≠ d·ª•ng userName t·ª´ homeResponse ho·∫∑c m·∫∑c ƒë·ªãnh l√† "User"
    };
  } catch (error: any) {
    // ‚úÖ X·ª≠ l√Ω l·ªói ƒë√∫ng c√°ch
    if (error instanceof Error) {
      console.error("üö® L·ªói l·∫•y d·ªØ li·ªáu Home:", error.message);
    } else {
      console.error("üö® L·ªói kh√¥ng x√°c ƒë·ªãnh khi l·∫•y d·ªØ li·ªáu Home:", error);
    }

    // In th√™m th√¥ng tin chi ti·∫øt c·ªßa l·ªói n·∫øu c√≥
    if (error.response) {
      console.error("üö® Chi ti·∫øt l·ªói:", {
        status: error.response.status,
        data: error.response.data,
        url: error.config?.url,
        method: error.config?.method,
      });
    }

    // Tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫∑c ƒë·ªãnh trong tr∆∞·ªùng h·ª£p l·ªói
    return {
      userName: "User",
      userAvatar: "",
      totalBalance: 0,
      totalExpense: 0,
      savingsOnGoals: 0,
      goalPercentage: 0,
      revenueLostWeek: 0,
      foodLastWeek: 0,
      transactions: [],
    };
  }
};

// üìù L·∫•y d·ªØ li·ªáu giao d·ªãch g·∫ßn ƒë√¢y
export const fetchTransactions = async (filter = "monthly") => {
  try {
    const token = await AsyncStorage.getItem("token");
    if (!token) {
      throw new Error("üö® Token does not exist!");
    }

    // Chuy·ªÉn ƒë·ªïi filter sang timeFilter cho endpoint
    const endpoint = `/api/transactions?timeFilter=${filter}`;

    console.log(`‚úÖ Calling API: ${endpoint}`);

    // L·∫•y d·ªØ li·ªáu giao d·ªãch
    const response = await api.get(endpoint, {
      headers: { Authorization: `Bearer ${token}` },
    });

    console.log("‚úÖ API transactions response:", response.data);

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng d·ªØ li·ªáu tr·∫£ v·ªÅ
    if (response.data && Array.isArray(response.data.transactions)) {
      return response.data.transactions;
    } else if (Array.isArray(response.data)) {
      return response.data;
    } else {
      console.warn("‚ö†Ô∏è Unexpected transaction data format:", response.data);
      return [];
    }
  } catch (error: any) {
    // ‚úÖ X·ª≠ l√Ω l·ªói
    if (error instanceof Error) {
      console.error("üö® Error fetching transactions:", error.message);
    } else {
      console.error("üö® Unknown error when fetching transactions:", error);
    }

    // In th√™m th√¥ng tin chi ti·∫øt c·ªßa l·ªói n·∫øu c√≥
    if (error.response) {
      console.error("üö® Error details:", {
        status: error.response.status,
        data: error.response.data,
        url: error.config?.url,
        method: error.config?.method,
      });
    }

    // Return sample data in case of error
    return [
      {
        date: new Date().toLocaleDateString(),
        transactions: [
          {
            id: "1",
            title: "Salary",
            type: "income",
            amount: 3500000,
            date: new Date(),
            category: {
              name: "Salary",
              type: "income",
              icon: "cash-outline",
              color: "#4CAF50",
            },
          },
          {
            id: "2",
            title: "Restaurant",
            type: "expense",
            amount: 150000,
            date: new Date(Date.now() - 86400000), // Yesterday
            category: {
              name: "Food & Drink",
              type: "expense",
              icon: "restaurant-outline",
              color: "#FF6B6B",
            },
          },
        ],
      },
      {
        date: new Date(Date.now() - 86400000 * 2).toLocaleDateString(), // 2 days ago
        transactions: [
          {
            id: "3",
            title: "Transportation",
            type: "expense",
            amount: 55000,
            date: new Date(Date.now() - 86400000 * 2),
            category: {
              name: "Transportation",
              type: "expense",
              icon: "car-outline",
              color: "#4DC0F5",
            },
          },
        ],
      },
    ];
  }
};
