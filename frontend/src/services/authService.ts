import api from "./apiService";
import AsyncStorage from "@react-native-async-storage/async-storage";
import * as LocalAuthentication from "expo-local-authentication";

interface LoginCredentials {
  email: string;
  password: string;
}

interface BiometricLoginResult {
  success: boolean;
  error?: string;
  token?: string;
  userData?: any;
}

// ƒêƒÉng k√Ω t√†i kho·∫£n
export const register = async (userData: {
  email: string;
  password: string;
  fullName: string;
}) => {
  try {
    const response = await api.post("/auth/register", userData);
    return response.data;
  } catch (error: any) {
    throw new Error(error.response?.data?.message || "Error registering user.");
  }
};

// ƒêƒÉng nh·∫≠p
export const login = async (credentials: LoginCredentials) => {
  try {
    const response = await api.post("/auth/login", credentials);

    if (response.data.token) {
      await AsyncStorage.setItem("token", response.data.token);

      // L∆∞u th√¥ng tin ƒëƒÉng nh·∫≠p cho Face ID n·∫øu t√≠nh nƒÉng ƒë√£ ƒë∆∞·ª£c b·∫≠t
      const faceIDEnabledStr = await AsyncStorage.getItem("faceIDEnabled");
      if (faceIDEnabledStr === "true") {
        await saveSecureCredentials(credentials);
      }
    }

    return response.data;
  } catch (error) {
    console.error("Login error:", error);
    throw error;
  }
};

// ƒêƒÉng nh·∫≠p b·∫±ng Google
export const loginWithGoogle = async (idToken: string) => {
  const response = await api.post("/auth/google", { idToken });
  await AsyncStorage.setItem("token", response.data.token);
  return response.data.token;
};

// ƒêƒÉng nh·∫≠p b·∫±ng Facebook
export const loginWithFacebook = async (accessToken: string) => {
  try {
    console.log("üì§ G·ª≠i token Facebook ƒë·∫øn server...");
    const response = await api.post("/auth/facebook", { accessToken });

    if (response.data.token) {
      await AsyncStorage.setItem("token", response.data.token);
      console.log("‚úÖ Token Facebook ƒë∆∞·ª£c l∆∞u:", response.data.token);
    } else {
      console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y token t·ª´ Facebook API!");
    }

    return response.data.token;
  } catch (error) {
    console.error("‚ùå Facebook login error:", error);
    throw new Error("Facebook authentication failed");
  }
};

// Qu√™n m·∫≠t kh·∫©u
export const forgotPassword = async (email: string) => {
  const response = await api.post("/auth/forgot-password", { email });
  return response.data;
};

// ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
export const resetPassword = async (
  email: string,
  resetCode: string,
  newPassword: string
) => {
  const response = await api.post("/auth/reset-password", {
    email,
    resetCode,
    newPassword,
  });
  return response.data;
};

// ƒêƒÉng xu·∫•t
export const logout = async () => {
  try {
    await AsyncStorage.removeItem("token");
    await AsyncStorage.removeItem("userId");
    // Kh√¥ng x√≥a securedEmail v√† securedPassword ƒë·ªÉ c√≥ th·ªÉ d√πng Face ID ƒëƒÉng nh·∫≠p l·∫°i
    return { success: true };
  } catch (error) {
    console.error("Logout error:", error);
    throw error;
  }
};

// L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
export const getUserData = async () => {
  try {
    const response = await api.get("/user/profile");
    return response.data;
  } catch (error) {
    console.error("Get user data error:", error);
    throw error;
  }
};

// Ki·ªÉm tra xem c√≥ th·ªÉ ƒëƒÉng nh·∫≠p b·∫±ng Face ID kh√¥ng
export const canLoginWithBiometrics = async (): Promise<boolean> => {
  try {
    // Ki·ªÉm tra xem thi·∫øt b·ªã c√≥ h·ªó tr·ª£ Face ID kh√¥ng
    const hasHardware = await LocalAuthentication.hasHardwareAsync();
    if (!hasHardware) return false;

    // Ki·ªÉm tra xem Face ID c√≥ ƒë∆∞·ª£c c·∫•u h√¨nh tr√™n thi·∫øt b·ªã kh√¥ng
    const isEnrolled = await LocalAuthentication.isEnrolledAsync();
    if (!isEnrolled) return false;

    // Ki·ªÉm tra xem c√≥ l∆∞u th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng
    const email = await AsyncStorage.getItem("securedEmail");
    const password = await AsyncStorage.getItem("securedPassword");
    if (!email || !password) return false;

    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ b·∫≠t Face ID trong ·ª©ng d·ª•ng ch∆∞a
    const faceIDEnabledStr = await AsyncStorage.getItem("faceIDEnabled");
    return faceIDEnabledStr === "true";
  } catch (error) {
    console.error("Error checking biometric availability:", error);
    return false;
  }
};

// ƒêƒÉng nh·∫≠p b·∫±ng Face ID
export const loginWithBiometrics = async (): Promise<BiometricLoginResult> => {
  try {
    const canUse = await canLoginWithBiometrics();
    if (!canUse) {
      return {
        success: false,
        error:
          "Face ID is not available or hasn't been configured for this app.",
      };
    }

    // X√°c th·ª±c b·∫±ng Face ID
    const result = await LocalAuthentication.authenticateAsync({
      promptMessage: "Authenticate to Login",
      fallbackLabel: "Use Password",
      cancelLabel: "Cancel",
      disableDeviceFallback: true,
    });

    if (!result.success) {
      return {
        success: false,
        error: "Face ID authentication failed.",
      };
    }

    // L·∫•y th√¥ng tin ƒëƒÉng nh·∫≠p ƒë√£ l∆∞u
    const email = await AsyncStorage.getItem("securedEmail");
    const password = await AsyncStorage.getItem("securedPassword");

    if (!email || !password) {
      return {
        success: false,
        error:
          "Saved login credentials not found. Please login with password first.",
      };
    }

    // ƒêƒÉng nh·∫≠p b·∫±ng th√¥ng tin ƒë√£ l∆∞u
    const response = await api.post("/auth/login", { email, password });

    if (response.data.token) {
      await AsyncStorage.setItem("token", response.data.token);

      return {
        success: true,
        token: response.data.token,
        userData: response.data.user,
      };
    } else {
      return {
        success: false,
        error: "Invalid login credentials.",
      };
    }
  } catch (error) {
    console.error("Biometric login error:", error);
    return {
      success: false,
      error: "An error occurred during Face ID authentication.",
    };
  }
};

// Ki·ªÉm tra xem token c√≥ h·ª£p l·ªá kh√¥ng
export const isAuthenticated = async () => {
  try {
    const token = await AsyncStorage.getItem("token");
    if (!token) return false;

    // Ki·ªÉm tra token c√≤n h·ª£p l·ªá kh√¥ng
    const response = await api.get("/auth/verify");
    return response.data.valid;
  } catch (error) {
    console.error("Token verification error:", error);
    return false;
  }
};

// L∆∞u th√¥ng tin ƒëƒÉng nh·∫≠p an to√†n cho Face ID
export const saveSecureCredentials = async (
  credentials: LoginCredentials
): Promise<boolean> => {
  try {
    await AsyncStorage.setItem("securedEmail", credentials.email);
    await AsyncStorage.setItem("securedPassword", credentials.password);
    return true;
  } catch (error) {
    console.error("Error saving secure credentials:", error);
    return false;
  }
};

// Th√™m h√†m x√°c th·ª±c b·∫±ng FaceID cho b·∫•t k·ª≥ t√°c v·ª• n√†o
export const authenticateWithFaceID = async (
  prompt = "X√°c th·ª±c b·∫±ng Face ID"
): Promise<boolean> => {
  try {
    // Ki·ªÉm tra thi·∫øt b·ªã c√≥ h·ªó tr·ª£ FaceID kh√¥ng
    const hasHardware = await LocalAuthentication.hasHardwareAsync();
    if (!hasHardware) {
      console.log("Thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ x√°c th·ª±c sinh tr·∫Øc h·ªçc");
      return false;
    }

    // Ki·ªÉm tra ng∆∞·ªùi d√πng ƒë√£ c·∫•u h√¨nh Face ID/Touch ID ch∆∞a
    const isEnrolled = await LocalAuthentication.isEnrolledAsync();
    if (!isEnrolled) {
      console.log(
        "Ng∆∞·ªùi d√πng ch∆∞a c·∫•u h√¨nh x√°c th·ª±c sinh tr·∫Øc h·ªçc tr√™n thi·∫øt b·ªã"
      );
      return false;
    }

    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ b·∫≠t Face ID trong ·ª©ng d·ª•ng ch∆∞a
    const faceIDEnabledString = await AsyncStorage.getItem("faceIDEnabled");
    const faceIDEnabled = faceIDEnabledString === "true";
    if (!faceIDEnabled) {
      console.log("Face ID ch∆∞a ƒë∆∞·ª£c b·∫≠t trong ·ª©ng d·ª•ng");
      return false;
    }

    // Th·ª±c hi·ªán x√°c th·ª±c
    const result = await LocalAuthentication.authenticateAsync({
      promptMessage: prompt,
      fallbackLabel: "S·ª≠ d·ª•ng m√£ PIN",
      cancelLabel: "H·ªßy",
      disableDeviceFallback: false,
    });

    return result.success;
  } catch (error) {
    console.error("L·ªói x√°c th·ª±c Face ID:", error);
    return false;
  }
};

export default {
  loginUser: login,
  register,
  loginWithGoogle,
  loginWithFacebook,
  forgotPassword,
  resetPassword,
  logout,
  getUserData,
  canLoginWithBiometrics,
  loginWithBiometrics,
  isAuthenticated,
  authenticateWithFaceID,
};
