import api from "./apiService";
import AsyncStorage from "@react-native-async-storage/async-storage";
import axios from "axios";
import { config } from "../config/config";

interface LoginCredentials {
  email: string;
  password: string;
}

interface RegisterData {
  email: string;
  password: string;
  name: string;
}

interface AuthResponse {
  token: string;
  user: {
    id: string;
    email: string;
    name: string;
  };
}

// ƒêƒÉng k√Ω t√†i kho·∫£n
export const register = async (data: RegisterData): Promise<AuthResponse> => {
  try {
    const response = await axios.post(
      `${config.api.baseUrl}/api/auth/register`,
      data
    );
    const { token, user } = response.data;

    await AsyncStorage.setItem(config.auth.tokenKey, token);
    await AsyncStorage.setItem(config.auth.userKey, JSON.stringify(user));

    return response.data;
  } catch (error) {
    console.error("Register error:", error);
    throw error;
  }
};

// ƒêƒÉng nh·∫≠p
export const login = async (
  credentials: LoginCredentials
): Promise<AuthResponse> => {
  try {
    const response = await axios.post(
      `${config.api.baseUrl}/api/auth/login`,
      credentials
    );
    const { token, user } = response.data;

    await AsyncStorage.setItem(config.auth.tokenKey, token);
    await AsyncStorage.setItem(config.auth.userKey, JSON.stringify(user));

    return response.data;
  } catch (error) {
    console.error("Login error:", error);
    throw error;
  }
};

// ƒêƒÉng nh·∫≠p b·∫±ng Google
export const loginWithGoogle = async (idToken: string) => {
  const response = await api.post("/api/auth/google", { idToken });
  await AsyncStorage.setItem("token", response.data.token);
  return response.data.token;
};

// ƒêƒÉng nh·∫≠p b·∫±ng Facebook
export const loginWithFacebook = async (accessToken: string) => {
  try {
    console.log("üì§ G·ª≠i token Facebook ƒë·∫øn server...");
    const response = await api.post("/api/auth/facebook", { accessToken });

    if (response.data.token) {
      await AsyncStorage.setItem("token", response.data.token);
      console.log("‚úÖ Token Facebook ƒë∆∞·ª£c l∆∞u:", response.data.token);
    } else {
      console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y token t·ª´ Facebook API!");
    }

    return response.data.token;
  } catch (error) {
    console.error("‚ùå Facebook login error:", error);
    throw new Error("Facebook authentication failed");
  }
};

// Forgot password - request reset code
export const forgotPassword = async (email: string) => {
  try {
    console.log("üì§ Sending forgot password request for:", email);
    const response = await axios.post(
      `${config.api.baseUrl}/api/auth/forgot-password`,
      {
        email,
      }
    );
    console.log("‚úÖ Forgot password response:", response.data);
    return response.data;
  } catch (error: any) {
    console.error(
      "‚ùå Forgot password error:",
      error.response?.data || error.message
    );
    throw new Error(
      error.response?.data?.message || "Failed to send reset code"
    );
  }
};

// Reset password with code
export const resetPassword = async (email: string, resetCode: string) => {
  try {
    console.log("üì§ Verifying reset code for:", email);
    console.log("Reset code:", resetCode);

    const response = await axios.post(
      `${config.api.baseUrl}/api/auth/verify-reset-code`,
      {
        email,
        resetCode,
      }
    );

    console.log("‚úÖ Reset code verification response:", response.data);
    return response.data;
  } catch (error: any) {
    // Tr·∫£ v·ªÅ response data t·ª´ server n·∫øu c√≥
    if (error.response?.data) {
      return error.response.data;
    }

    // N·∫øu kh√¥ng c√≥ response data, throw error
    throw new Error("Failed to verify code. Please try again.");
  }
};

// Update password with new password
export const updatePassword = async (
  email: string,
  resetCode: string,
  newPassword: string
) => {
  try {
    console.log("üì§ Updating password for:", email);
    const response = await axios.post(
      `${config.api.baseUrl}/api/auth/reset-password`,
      {
        email,
        resetCode,
        newPassword,
      }
    );
    console.log("‚úÖ Password update response:", response.data);
    return response.data;
  } catch (error: any) {
    console.error(
      "‚ùå Password update error:",
      error.response?.data || error.message
    );
    throw new Error(
      error.response?.data?.message || "Failed to update password"
    );
  }
};

// ƒêƒÉng xu·∫•t
export const logout = async (): Promise<void> => {
  try {
    await AsyncStorage.multiRemove([config.auth.tokenKey, config.auth.userKey]);
  } catch (error) {
    console.error("Logout error:", error);
    throw error;
  }
};

// L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
export const getCurrentUser = async (): Promise<any> => {
  try {
    const userStr = await AsyncStorage.getItem(config.auth.userKey);
    return userStr ? JSON.parse(userStr) : null;
  } catch (error) {
    console.error("Get current user error:", error);
    throw error;
  }
};

// Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
export const isAuthenticated = async (): Promise<boolean> => {
  try {
    const token = await AsyncStorage.getItem(config.auth.tokenKey);
    return !!token;
  } catch (error) {
    console.error("Check authentication error:", error);
    return false;
  }
};

export default {
  register,
  login,
  logout,
  loginWithGoogle,
  loginWithFacebook,
  forgotPassword,
  resetPassword,
  updatePassword,
  getCurrentUser,
  isAuthenticated,
};
